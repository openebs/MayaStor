// Service for managing storage pools, replicas and nexus's.
// Replica holds the actual user data. From user application the
// data are accessed indirectly through nexus object.

syntax = "proto3";

package mayastor_service;
import "mayastor.proto";

service Mayastor {
	// Storage pool related methods.
	//
	// Storage pool is made up of block devices disks and provides a storage
	// space for thin provisioning of replicas.

	rpc CreatePool (mayastor.CreatePoolRequest) returns (mayastor.Null) {}
	rpc DestroyPool (mayastor.DestroyPoolRequest) returns (mayastor.Null) {}
	rpc ListPools (mayastor.Null) returns (mayastor.ListPoolsReply) {}

	// Replica related methods.
	//
	// Replica allocates space from storage pool.

	rpc CreateReplica (mayastor.CreateReplicaRequest) returns (mayastor.Null) {}
	rpc DestroyReplica (mayastor.DestroyReplicaRequest) returns (mayastor.Null) {}
	rpc ListReplicas (mayastor.Null) returns (mayastor.ListReplicasReply) {}
	rpc StatReplicas (mayastor.Null) returns (mayastor.StatReplicasReply) {}

	// Nexus related methods.
  //
  // Nexus is a logical frontend representing a data volume taking care of
  // replication and rebuild in the background.

	rpc CreateNexus (mayastor.CreateNexusRequest) returns (mayastor.Null){}
	rpc DestroyNexus (mayastor.DestroyNexusRequest) returns (mayastor.Null) {}
	rpc ListNexus (mayastor.Null) returns (mayastor.ListNexusReply) {}

	// This method is called by control plane to construct a block device
	// (/dev/...) that will be used to connect the nexus to the OS.
	rpc PublishNexus (mayastor.PublishNexusRequest) returns (mayastor.PublishNexusReply) {}
	rpc UnpublishNexus (mayastor.UnpublishNexusRequest) returns (mayastor.Null) {}

	// Nexus child operations
	rpc ChildOperation(mayastor.ChildNexusRequest) returns (mayastor.Null) {}
}
